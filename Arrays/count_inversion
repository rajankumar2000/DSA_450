long long int merge(long long int arr[],long long temp[],long long int left,long long int mid,long long int right){
//       long long int i,j,k,count=0;
//       i=left;
//       j=mid;
//       k=left;
//       while ((i <= mid - 1) && (j <= right)) {
// 		if (arr[i] <= arr[j]) {
// 			temp[k++] = arr[i++];
// 		}
// 		else {
// 			temp[k++] = arr[j++];

// 			count = count + (mid - i);
// 		}
// 	}

// 	while (i <= mid - 1)
// 		temp[k++] = arr[i++];

	
// 	while (j <= right)
// 		temp[k++] = arr[j++];

	
// 	for (i = left; i <= right; i++)
// 		arr[i] = temp[i];

// 	return count;
long long int i, j, k;
	long long int inv_count = 0;

	i = left; 
	j = mid; 
	k = left; 
	while ((i <= mid - 1) && (j <= right)) {
		if (arr[i] <= arr[j]) {
			temp[k++] = arr[i++];
		}
		else {
			temp[k++] = arr[j++];

			inv_count = inv_count + (mid - i);
		}
	}

	while (i <= mid - 1)
		temp[k++] = arr[i++];

	
	while (j <= right)
		temp[k++] = arr[j++];

	
	for (i = left; i <= right; i++)
		arr[i] = temp[i];

	return inv_count;
   }
   
    long long int _mergeSort(long long arr[],long long temp[],long long int left,long long int right){
        long long int mid,count=0;
        if(right>left){
            mid=((left+right)/2);
            count+=_mergeSort(arr,temp,left,mid);
            count+=_mergeSort(arr,temp,mid+1,right);
            
            count+=merge(arr,temp,left,mid+1,right);
        }
            return count;
            
         
//         long long int mid, inv_count = 0;
// 	if (right > left) {
// 		mid = (right + left) / 2;

// 		inv_count += _mergeSort(arr, temp, left, mid);
// 		inv_count += _mergeSort(arr, temp, mid + 1, right);

// 		inv_count += merge(arr, temp, left, mid + 1, right);
// 	}
// 	return inv_count;
    }
    long long int inversionCount(long long arr[], long long N)
    {
        // Your Code Here
        long long int temp[N];
        return _mergeSort(arr,temp,0,N-1);
    }
